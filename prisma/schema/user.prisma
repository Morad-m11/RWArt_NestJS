model User {
    id             Int      @id @default(autoincrement())
    email          String   @unique
    username       String   @unique
    picture        String?
    passwordHash   String?
    email_verified Boolean  @default(false)
    createdAt      DateTime @default(now())
    updatedAt      DateTime @updatedAt

    refreshTokens            RefreshToken[]
    passwordResetToken       PasswordResetToken?
    accountVerificationToken AccountVerificationToken?
    thirdPartyAccount        ThirdPartyAccount?
    posts                    Post[]
    upvotes                  Upvote[]
    feedbacks                Feedback[]
}

model ThirdPartyAccount {
    id             Int    @id @default(autoincrement())
    userId         Int    @unique
    provider       String
    providerUserId String
    User           User   @relation(fields: [userId], references: [id])

    @@unique([provider, providerUserId])
}

model RefreshToken {
    id            Int       @id @default(autoincrement())
    userId        Int
    tokenHash     String    @unique
    createdByIp   String
    createdAt     DateTime  @default(now())
    expiresAt     DateTime
    revokedAt     DateTime?
    revokedReason String?
    user          User      @relation(fields: [userId], references: [id])
}

model PasswordResetToken {
    id        Int      @id @default(autoincrement())
    userId    Int      @unique
    tokenHash String   @unique
    createdAt DateTime @default(now())
    expiresAt DateTime
    user      User     @relation(fields: [userId], references: [id])
}

model AccountVerificationToken {
    id        Int      @id @default(autoincrement())
    userId    Int      @unique
    tokenHash String   @unique
    createdAt DateTime @default(now())
    expiresAt DateTime
    user      User     @relation(fields: [userId], references: [id])
}
